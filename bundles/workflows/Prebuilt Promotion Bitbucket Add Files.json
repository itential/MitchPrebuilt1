{
  "canvasVersion": 1,
  "created": "2022-04-15T14:36:04.568Z",
  "createdVersion": "5.40.5-2021.1.72.0",
  "created_by": {
    "provenance": "local_aaa",
    "username": "admin@pronghorn",
    "firstname": "admin",
    "inactive": false,
    "email": ""
  },
  "description": "",
  "font_size": 12,
  "inputSchema": {
    "type": "object",
    "properties": {}
  },
  "lastUpdatedVersion": "5.40.5-2021.1.89.0",
  "last_updated": "2022-11-18T18:18:22.139Z",
  "last_updated_by": {
    "provenance": "local_aaa",
    "username": "admin@pronghorn",
    "firstname": "admin",
    "inactive": false,
    "email": ""
  },
  "name": "Prebuilt Promotion Bitbucket Add Files",
  "outputSchema": {
    "type": "object",
    "properties": {
      "_id": {
        "type": "string",
        "pattern": "^[0-9a-f]{24}$"
      },
      "initiator": {
        "type": "string"
      },
      "scriptFiles": {
        "title": "pushedArray",
        "type": "array",
        "examples": [
          [
            "Device1",
            "Device2",
            "Device3"
          ]
        ]
      },
      "testFiles": {
        "title": "pushedArray",
        "type": "array",
        "examples": [
          [
            "Device1",
            "Device2",
            "Device3"
          ]
        ]
      },
      "yml": {
        "title": "pushedArray",
        "type": "array",
        "examples": [
          [
            "Device1",
            "Device2",
            "Device3"
          ]
        ]
      }
    }
  },
  "preAutomationTime": 0,
  "sla": 0,
  "tasks": {
    "866": {
      "name": "setObjectKey",
      "canvasName": "setObjectKey",
      "summary": "commit.sh file content",
      "description": "Set an object key",
      "location": "Application",
      "locationType": null,
      "app": "WorkFlowEngine",
      "type": "automatic",
      "displayName": "Object",
      "variables": {
        "incoming": {
          "obj": {
            "name": "commit.sh"
          },
          "path": [
            "content"
          ],
          "value": "if ! sh ./scripts/git_setup.sh; then\n  exit 1\nfi\necho \"BITBUCKET PROJECT ID IS - $BITBUCKET_REPO_UUID\"\ncd scripts\nGENERATE=`node generate $BITBUCKET_REPO_UUID $BITBUCKET_GIT_HTTP_ORIGIN ${BITBUCKET_BRANCH}`\nif [ $? -ne 0 ]\nthen \n  echo $GENERATE\n  exit 1\nfi\ncd ..\ngit add artifact.json\ngit diff --cached --name-only | if grep artifact.json\nthen\n    git commit -m \"AUTO-GENERATED FILE [skip ci]\"\n    if ! git push origin \"${BITBUCKET_BRANCH}\"; then\n      echo -e \"\\033[0;31mERROR: ***********************************************************************************\"\n      echo \"ERROR: There was an issue pushing artifact.json.\"\n      echo -e \"ERROR: ***********************************************************************************\\033[0m\"\n      exit 1\n    else\n      echo \"A new generated artifact.json file has been checked in to current branch\"\n    fi   \nelse\n    echo \"artifact.json file hasn't changed\"\nfi\n"
        },
        "outgoing": {
          "object": null
        },
        "error": "",
        "decorators": []
      },
      "deprecated": false,
      "groups": [],
      "actor": "Pronghorn",
      "x": 0.5103349964362082,
      "y": 0.19075712881022616,
      "scheduled": false
    },
    "1649": {
      "name": "arrayPush",
      "canvasName": "push",
      "summary": "Add generate.js",
      "description": "Adds one element to the end of an array and returns the (newly modified) array.",
      "location": "Application",
      "locationType": null,
      "app": "WorkFlowEngine",
      "type": "automatic",
      "displayName": "Array",
      "variables": {
        "incoming": {
          "arr": [],
          "elementN": "$var.e474.object"
        },
        "outgoing": {
          "pushedArray": null
        },
        "error": "",
        "decorators": []
      },
      "deprecated": false,
      "groups": [],
      "actor": "Pronghorn",
      "x": 0.3706343549536707,
      "y": 0.37659783677482794,
      "scheduled": false
    },
    "3853": {
      "name": "setObjectKey",
      "canvasName": "setObjectKey",
      "summary": "create_release_script.sh file content",
      "description": "Set an object key",
      "location": "Application",
      "locationType": null,
      "app": "WorkFlowEngine",
      "type": "automatic",
      "displayName": "Object",
      "variables": {
        "incoming": {
          "obj": {
            "name": "create_release_script.sh"
          },
          "path": [
            "content"
          ],
          "value": "#!/bin/bash\n#---------------------#\n# Create release note #\n#---------------------#\n\nNEW_VERSION=$1\n\ncreate_release_note() {\n    # Create a changelog file if there isn't one\n    if [ ! -e CHANGELOG.md ]; then\n        touch CHANGELOG.md\n    fi\n    echo \"Creating release note...\"\n\n    #----------------#\n    # Changelog Body #\n    #----------------#\n    # Get the merge request info\n    CHANGELOG_BODY=\"$(git log --merges -1 --format=%b)\"\n    if [ -z \"$CHANGELOG_BODY\" ]; then\n        CHANGELOG_BODY=\"$(git log -1 --format='Bug fixes and performance improvements'%n%n'See commit '%h)\"\n    fi\n    #--------------------#\n    # Write Release Note #\n    #--------------------#\n\n    # get the current date\n    DATE=$(date +%m-%d-%Y)\n    # create the release note\n    RELEASE_NOTE=\"\\\\n## $NEW_VERSION [$DATE]\\\\n\\\\n* $CHANGELOG_BODY\\\\n\\\\n---\\\\n\"\n    # append Release Note to Top of CHANGELOG\n    if ! echo -e \"$RELEASE_NOTE$(cat CHANGELOG.md)\" > CHANGELOG.md; then\n        echo -e \"\\033[0;31mERROR: ***********************************************************************************\"\n        echo \"ERROR: Unable to append release note information to changelog.\"\n        echo -e \"ERROR: ***********************************************************************************\\033[0m\"\n    else\n        echo \"Created release note:\"\n        echo \"$RELEASE_NOTE\"\n    fi\n}\n\ncreate_release_note \"$NEW_VERSION\""
        },
        "outgoing": {
          "object": null
        },
        "error": "",
        "decorators": []
      },
      "deprecated": false,
      "groups": [],
      "actor": "Pronghorn",
      "x": 0.7034925160370634,
      "y": 0.20452310717797442,
      "scheduled": false
    },
    "5820": {
      "name": "arrayPush",
      "canvasName": "push",
      "summary": "Add manifest-schema.json",
      "description": "Adds one element to the end of an array and returns the (newly modified) array.",
      "location": "Application",
      "locationType": null,
      "app": "WorkFlowEngine",
      "type": "automatic",
      "displayName": "Array",
      "variables": {
        "incoming": {
          "arr": [],
          "elementN": "$var.7019.object"
        },
        "outgoing": {
          "pushedArray": null
        },
        "error": "",
        "decorators": []
      },
      "deprecated": false,
      "groups": [],
      "actor": "Pronghorn",
      "x": 2.1368496079828936,
      "y": 0.37954768928220256,
      "scheduled": false
    },
    "6323": {
      "name": "setObjectKey",
      "canvasName": "setObjectKey",
      "summary": "manifestTester.js file content",
      "description": "Set an object key",
      "location": "Application",
      "locationType": null,
      "app": "WorkFlowEngine",
      "type": "automatic",
      "displayName": "Object",
      "variables": {
        "incoming": {
          "obj": {
            "name": "manifestTester.js"
          },
          "path": [
            "content"
          ],
          "value": "const AJV = require('ajv'),\n  path = require('path'),\n  fs = require('fs-extra'),\n  r2 = require('r2'),\n  betterAjvErrors = require('better-ajv-errors');\n\nconst ajv = new AJV({\n  jsonPointers: true,\n  allErrors: true\n});\n\nconst args = process.argv.filter((element, index) => {\n  return index >= 2;\n});\nif (args.length != 2) {\n  const usage = `\n  ==============================================================\n    Simplified manifest schema validator, using ajv,\n    that can be used for very quick schema validations.\n    This will validate a json file against the schema\n    found in manifest-schema.json\n\n    Examples:\n    Usage: node manifestTester.js someManifestFile.json PATH/TO/SCHEMA/FILE.json\n    Usage: node manifestTester.js someManifestFile.json http://www.PATH.TO/SCHEMA/FILE.json\n\n    NOTE: for a graphical JSON schema validator go to\n    https://www.jsonschemavalidator.net/\n\n  ==============================================================`;\n  console.log(usage);\n  process.exit(1);\n}\n\nasync function runValidation() {\n  let schema;\n  if (args[1].includes(\"http\")) {\n    schema = await r2(args[1]).json;\n  }\n  else {\n    schema = require(path.join(__dirname, args[1]));\n  }\n  // console.log(`the schema is : ${JSON.stringify(schema)}`)\n  const filePath = path.normalize(args[0]);\n  console.log(`Retrieving ${filePath}`);\n  try {\n    const manifest = await fs.readFile(filePath, 'utf8');\n    console.log('Converting to JSON object');\n    const data = JSON.parse(manifest);\n\n    console.log('Initializing AJV with schema');\n    ajv.addSchema(schema, 'manifestSchema');\n    console.log(`Validating ${filePath} against the schema`);\n    var valid = ajv.validate('manifestSchema', data);\n    if (!valid) {\n      console.error('❌  Validation Failed');\n      const output = betterAjvErrors(schema, data, ajv.errors, { format: 'js' });\n      console.log(output);\n      process.exit(1);\n\n    }\n    else {\n      console.log('✅  Validation passed');\n    }\n  }\n  catch (error) {\n    console.error(error);\n    process.exit(1);\n  }\n}\ntry {\n  runValidation();\n}\ncatch (error) {\n  console.error(`❌  Error occurred running the validator ${error}`);\n  process.exit(1);\n}\n"
        },
        "outgoing": {
          "object": null
        },
        "error": "",
        "decorators": []
      },
      "deprecated": false,
      "groups": [],
      "actor": "Pronghorn",
      "x": 2.540270848182466,
      "y": 0.176007866273353,
      "scheduled": false
    },
    "7019": {
      "name": "setObjectKey",
      "canvasName": "setObjectKey",
      "summary": "manifest-schema.json content",
      "description": "Set an object key",
      "location": "Application",
      "locationType": null,
      "app": "WorkFlowEngine",
      "type": "automatic",
      "displayName": "Object",
      "variables": {
        "incoming": {
          "obj": {
            "name": "manifest-schema.json"
          },
          "path": [
            "content"
          ],
          "value": "$var.6f7b.stringified"
        },
        "outgoing": {
          "object": null
        },
        "error": "",
        "decorators": []
      },
      "deprecated": false,
      "groups": [],
      "actor": "Pronghorn",
      "x": 2.0648610121168924,
      "y": 0.19469026548672566,
      "scheduled": false
    },
    "workflow_start": {
      "name": "workflow_start",
      "groups": [],
      "x": 0.11332858161083392,
      "y": 0.19075712881022616
    },
    "workflow_end": {
      "name": "workflow_end",
      "groups": [],
      "x": 2.9725490196078432,
      "y": 0.18990384615384615
    },
    "e474": {
      "name": "setObjectKey",
      "canvasName": "setObjectKey",
      "summary": "generate.js file content",
      "description": "Set an object key",
      "location": "Application",
      "locationType": null,
      "app": "WorkFlowEngine",
      "type": "automatic",
      "displayName": "Object",
      "variables": {
        "incoming": {
          "obj": {
            "name": "generate.js"
          },
          "path": [
            "content"
          ],
          "value": "const path = require('path');\nconst fs = require('fs');\n\nconst files = ['package.json', 'manifest.json', 'README.md'];\nlet success = true;\n\nconst PID = process.argv[2];\nconst bitbucketUrl = process.argv[3];\nconst bitbucketBranch = process.argv[4];\nif (PID === null || PID == undefined) {\n  console.error('Please run this script with Bitbucket Repo UUID as an argument');\n  process.exit(2);\n}\nconsole.log(`Generating artifact.json file w/ ${PID} as Bitbucket Repo ID`);\n\n/*function fileTypetoType(fileType) {\n  const underscoreToDash = fileType.replace(/_/g, '-');\n  if (\n    fileType === 'ac_agenda_jobs' ||\n    fileType === 'mop_templates' ||\n    fileType === 'mop_analytic_templates' ||\n    fileType === 'templates' ||\n    fileType === 'workflows'\n  ) {\n    const singularize = underscoreToDash.substring(\n      0,\n      underscoreToDash.length - 1\n    );\n    return singularize;\n  }\n  if (fileType === 'catalog_store') {\n    return 'service-catalog';\n  }\n  return underscoreToDash;\n}*/\nconst filePath = __dirname.replace(\"/scripts\", \"\");\ntry {\n  const [packageJSON, manifest, readme] = files.map(entry => {\n    const result = fs.readFileSync(path.join(filePath, `./${entry}`), {\n      encoding: 'utf-8'\n    });\n    console.log(result)\n\n    if (entry !== 'README.md') {\n        const parsedRes = JSON.parse(result);\n        if (entry === 'manifest.json' && Object.prototype.hasOwnProperty.call(parsedRes, 'version')) {\n          delete parsedRes.version;\n        }\n      return parsedRes;\n    } else {\n      return result.replace(/\\.\\//gm, `${bitbucketUrl}/raw/${bitbucketBranch}/`);\n    }\n  });\n\n  // const result = fs.readdirSync(path.join(__dirname, './bundles'));\n  const bundles = [];\n  // result.forEach(entry => {\n  //   console.log(`   ➡ generating ${entry}(s)`);\n  //   const fileNames = fs.readdirSync(path.join(__dirname, `./bundles/${entry}`));\n  //   fileNames.forEach(file => {\n  //     const data = fs.readFileSync(\n  //       path.join(__dirname, `./bundles/${entry}/${file}`),\n  //       { encoding: 'utf-8' }\n  //     );\n  //     try {\n  //       bundles.push({ type: fileTypetoType(entry), data: JSON.parse(data) });\n  //       console.log(`     ⚪ ${file}   -   ✅`);\n  //     } catch(err) {\n  //       success = false;\n  //       console.log(`     ⚪ ${file}   -   ❌  - ${err}`);\n  //     }\n  //   });\n  // });\n\n  const components = manifest.artifacts;\n  components.forEach(file => {\n    try {\n      const data = fs.readFileSync(\n        path.join(filePath, `./${file.location}`),\n        { encoding: 'utf-8' }\n      );\n      bundles.push({ type: file.type, data: JSON.parse(data) });\n      console.log(`     ⚪ (${file.type})   -   ${file.location}   -   ✅`);\n    } catch (err) {\n      success = false;\n      console.log(`     ⚪  (${file.type})   -   ${file.location}   -   ❌  - ${err}`);\n    }\n  });\n\n  const metadata = {\n    name: packageJSON.name,\n    version: packageJSON.version,\n    description: packageJSON.description,\n    license: packageJSON.license,\n    repository: packageJSON.repository,\n    keywords: packageJSON.keywords,\n    author: packageJSON.author,\n    IAPDependencies: packageJSON.IAPDependencies,\n  };\n\n  if (success) {\n    console.log(`\\n\\nFinished successfully`);\n  } else {\n    console.log(`\\n\\nFinished with error(s)`);\n    process.exit(1);\n  }\n  const artifact = { metadata, manifest, bundles, readme };\n  fs.writeFileSync(\n    path.join(filePath, './artifact.json'),\n    JSON.stringify(artifact, null, 2)\n  );\n} catch (err) {\n  console.error(`Failed to generate artifact.json file: ${err}`);\n  process.exit(1);\n}\n"
        },
        "outgoing": {
          "object": null
        },
        "error": "",
        "decorators": []
      },
      "deprecated": false,
      "groups": [],
      "actor": "Pronghorn",
      "x": 0.2601568068424804,
      "y": 0.1927236971484759,
      "scheduled": false
    },
    "d42b": {
      "name": "setObjectKey",
      "canvasName": "setObjectKey",
      "summary": "git_setup.sh file content",
      "description": "Set an object key",
      "location": "Application",
      "locationType": null,
      "app": "WorkFlowEngine",
      "type": "automatic",
      "displayName": "Object",
      "variables": {
        "incoming": {
          "obj": {
            "name": "git_setup.sh"
          },
          "path": [
            "content"
          ],
          "value": "#!/bin/bash\n\n#-----------#\n# Git Setup #\n#-----------#\necho \"Setting up git credentials\"\nmkdir -p ~/.ssh\n\ngit config --global user.email \"$CI_GIT_EMAIL\"\ngit config --global user.name \"$CI_GIT_USERNAME\"\necho -e $ID_RSA > ~/.ssh/id_rsa\nchmod 0400 ~/.ssh/id_rsa\n\necho git config --list --show-origin\necho cat ~/.ssh/id_rsa\n\necho -e \"Host bitbucket.com\\\\n\\\\tStrictHostKeyChecking no\\\\n\\\\tLogLevel ERROR\\\\n\" >> ~/.ssh/config\ngit remote set-url origin http://bitbucket.org/$BITBUCKET_REPO_FULL_NAME\ngit remote -v\necho \"Git credentials configured.\"\ngit stash\ngit checkout ${BITBUCKET_BRANCH}\nif ! git pull --rebase --tags; then \n    echo -e \"\\033[0;31mERROR: ***********************************************************************************\"\n    echo \"ERROR: There was an issue connecting to remote. Check your credentials.\"\n    echo -e \"ERROR: ***********************************************************************************\\033[0m\"\n    exit 1\nfi \ngit reset --hard origin/${BITBUCKET_BRANCH}\n\necho \"${BITBUCKET_BRANCH} checked out.\"\n"
        },
        "outgoing": {
          "object": null
        },
        "error": "",
        "decorators": []
      },
      "deprecated": false,
      "groups": [],
      "actor": "Pronghorn",
      "x": 0.9458823529411765,
      "y": 0.20552884615384615,
      "scheduled": false
    },
    "8bdb": {
      "name": "setObjectKey",
      "canvasName": "setObjectKey",
      "summary": "node_setup.sh file content",
      "description": "Set an object key",
      "location": "Application",
      "locationType": null,
      "app": "WorkFlowEngine",
      "type": "automatic",
      "displayName": "Object",
      "variables": {
        "incoming": {
          "obj": {
            "name": "node_setup.sh"
          },
          "path": [
            "content"
          ],
          "value": "#!/bin/bash\n\n# check node version:\necho \"node version: $(node --version)\"\necho \"npm version: $(npm --version)\"\n\necho \"Installing dependencies...\"\nif [ ! -f package-lock.json ]; then\n    PRESENT='false'\n    echo 'package-lock does not exist - generating one now.'\n    npm i --package-lock-only\nelse \n    if ! npm ci -q --unsafe-perm; then\n        exit 1\n    fi\nfi\n\nif [ -n \"$PRESENT\" ]; then\n    git add package-lock.json\n    git commit -m 'initialized package-lock.json [ci skip]'\nfi\n\necho \"Dependencies installed.\"\n"
        },
        "outgoing": {
          "object": null
        },
        "error": "",
        "decorators": []
      },
      "deprecated": false,
      "groups": [],
      "actor": "Pronghorn",
      "x": 1.2384313725490197,
      "y": 0.20793269230769232,
      "scheduled": false
    },
    "80ce": {
      "name": "setObjectKey",
      "canvasName": "setObjectKey",
      "summary": "promote.py file content",
      "description": "Set an object key",
      "location": "Application",
      "locationType": null,
      "app": "WorkFlowEngine",
      "type": "automatic",
      "displayName": "Object",
      "variables": {
        "incoming": {
          "obj": {
            "name": "promote.py"
          },
          "path": [
            "content"
          ],
          "value": "import requests\nimport json\nimport sys\nimport os\n\n\nhostname = os.environ.get(\"IAP_HOSTNAME\")\nartifact_path = sys.argv[1]\n\n# checking if IAP_PUSH_TO_LOCAL env var is set -> if not, default to True\nif not (os.environ.get(\"IAP_PUSH_TO_LOCAL\")):\n  push_to_local = True\nelse:\n  push_to_local = True if os.environ.get(\"IAP_PUSH_TO_LOCAL\").lower() == \"true\" else False\n\n# checking if IAP_TOKEN is set -> if not, use basic auth login\ntoken = os.environ.get(\"IAP_TOKEN\")\nbasic_auth = False\nif not token:\n  basic_auth = True\n  username = os.environ.get(\"IAP_USERNAME\")\n  pw = os.environ.get(\"IAP_PW\")\n\nif not (artifact_path and hostname and (token or (username and pw))):\n  print(\"Missing environmental variables.\\nMake sure your environmental variables are set properly.\\nExiting...\")\n  sys.exit(1)\n\nartifact = json.load(open(f\"{artifact_path}\"))\n# Function Definitions\n# Handles getting token to authenticate into IAP\ndef get_token():\n  print(\"Getting auth token\")\n  url = f\"{hostname}/login\"\n  payload = json.dumps({\n    \"user\": {\n      \"username\": username,\n      \"password\": pw\n    }\n  })\n\n  response = requests.request(\n    \"POST\", \n    url, \n    headers={'Content-Type': 'application/json'},\n    data=payload)\n  if not response.status_code // 100 == 2:\n    raise Exception(\"Error: Unexpected response {}: Failed to get auth token\".format(response.text))\n  else: \n    return response.text\n\n# Checks if prebuilt already exists\ndef get_prebuilt(name):\n  print(f\"Retrieving prebuilt: {name}\")\n  url = f\"{hostname}/prebuilts?equals={name}&equalsField=name\"\n  response = requests.request(\n    \"GET\", \n    url,\n    headers={'Cookie': f'token={token}'})\n  if not response.status_code // 100 == 2:\n    raise Exception(\"Error: Unexpected response {}: Failed to get prebuilt\".format(response.text))\n  else: \n    return response.text\n\ndef add_prebuilt(payload): \n  print(\"Prebuilt does not exist yet - adding to IAP\")\n  url = f\"{hostname}/prebuilts/import\"\n  headers = {\n    'Content-Type': 'application/json',\n    'Cookie': f'token={token}'\n  }\n  response = requests.request(\n    \"POST\",\n    url,\n    headers=headers,\n    data=payload)\n  if \"Invalid repository configuration\" in response.text:\n    print(\"Failed to promote to original repository, pushing to local scope.\")\n    updated_payload = json.loads(payload)\n    updated_payload[\"prebuilt\"][\"metadata\"][\"repository\"] = {\n      \"type\": \"local\",\n      \"hostname\": \"localhost\",\n      \"path\": \"/\"\n    }\n    response = requests.request(\n      \"POST\",\n      url,\n      headers=headers,\n      data=json.dumps(updated_payload))\n  if not response.status_code // 100 == 2:\n    raise Exception(\"Error: Unexpected response {}: Failed to add prebuilt\".format(response.text))\n  else: \n    print(\"Successfully added prebuilt\")\n    return response.text\n\ndef update_prebuilt(id, payload):\n  print(\"Updating existing prebuilt\")\n  url = f\"{hostname}/prebuilts/{id}\"\n  headers = {\n    'Content-Type': 'application/json',\n    'Cookie': f'token={token}'\n  }\n  response = requests.request(\n    \"PUT\",\n    url,\n    headers=headers,\n    data=payload)\n  if \"Invalid repository configuration\" in response.text:\n    print(\"Failed to promote to original repository, pushing to local scope.\")\n    updated_payload = json.loads(payload)\n    updated_payload[\"prebuilt\"][\"metadata\"][\"repository\"] = {\n      \"type\": \"local\",\n      \"hostname\": \"localhost\",\n      \"path\": \"/\"\n    }\n    response = requests.request(\n      \"PUT\",\n      url,\n      headers=headers,\n      data=json.dumps(updated_payload))\n  if not response.status_code // 100 == 2:\n      raise Exception(\"Error: Unexpected response {}: Failed to update prebuilt\".format(response.text))\n  else: \n    print(\"Successfully updated prebuilt\")\n    return response.text\n\ndef logout():\n  print(\"Logging out of IAP\")\n  url = f\"{hostname}/login?logout=true\"\n  headers = {\n    'Content-Type': 'application/json',\n    'Cookie': f'token={token}'\n  }\n  response = requests.request(\n    \"GET\",\n    url,\n    headers=headers)\n  response = requests.request(\"GET\", url, headers=headers)\n\n# Script starts here\ntry: \n  if (basic_auth):\n    token = get_token()\n\n  # Set name of prebuilt\n  name = artifact[\"metadata\"][\"name\"]\n\n  results = get_prebuilt(name)\n  if push_to_local:\n    print(\"Setting artifact.json repository configuration to local\")\n    artifact[\"metadata\"][\"repository\"] = {\n      \"type\": \"local\",\n      \"hostname\": \"localhost\",\n      \"path\": \"/\"\n    }\n    print('Promoting to local scope in IAP')\n  payload = json.dumps({\n    \"prebuilt\": artifact,\n    \"options\": {\n      \"overwrite\": True \n    }\n  })\n  # if prebuilt doesn't exist, add it\n  if json.loads(results)[\"total\"] == 0:\n    response = add_prebuilt(payload)\n  else: # if prebuilt exists, update it\n      id = json.loads(results)[\"results\"][0][\"_id\"]\n      update_prebuilt(id, payload)\n\n  # logging out\n  logout()\nexcept requests.exceptions.RequestException as e: \n  # A serious problem happened, like an SSLError or InvalidURL\n  print(\"Error: {}\".format(e))\n  sys.exit(1)  \nexcept: # error handling to catch any errors that throw a non 200 code\n  e = sys.exc_info()[1]    \n  print(e)\n  sys.exit(1)\n"
        },
        "outgoing": {
          "object": null
        },
        "error": "",
        "decorators": []
      },
      "deprecated": false,
      "groups": [],
      "actor": "Pronghorn",
      "x": 1.5074839629365646,
      "y": 0.20648967551622419,
      "scheduled": false
    },
    "ef03": {
      "name": "setObjectKey",
      "canvasName": "setObjectKey",
      "summary": "ver_bump.sh file content",
      "description": "Set an object key",
      "location": "Application",
      "locationType": null,
      "app": "WorkFlowEngine",
      "type": "automatic",
      "displayName": "Object",
      "variables": {
        "incoming": {
          "obj": {
            "name": "ver_bump.sh"
          },
          "path": [
            "content"
          ],
          "value": "#!/bin/bash\n\n#-------------------#\n# Get Semver Prefix #\n#-------------------#\nVERSION=\"$(git log --format=%s --merges -1|awk -F\"'\" '{print $2}'|awk -F \"/\" '{print $1}')\"\ncase \"$VERSION\" in\n    # if PATCH transform to patch\n    patch|minor|major) SEMVER=\"$(echo \"$VERSION\" | awk '{print tolower($0)}')\";;\n    *) SEMVER=\"patch\";;\nesac\nif [ -z \"$VERSION\" ]; then\n    echo \"No branch prefix detected. Defaulting to patch.\"\nfi\n\necho \"Semver bump: $SEMVER\"\n\n#---------------------#\n# Get Current Version #\n#---------------------#\nCURRENT_VERSION=$(node -p \"require('./package.json').version\")\necho \"Last version: $CURRENT_VERSION\"\nCURRENT_MAJOR=$(echo \"$CURRENT_VERSION\"|awk -F'.' '{print $1}')\nCURRENT_MINOR=$(echo \"$CURRENT_VERSION\"|awk -F'.' '{print $2}')\nCURRENT_PATCH=$(echo \"$CURRENT_VERSION\"|awk -F'.' '{print $3}'|awk -F'-' '{print $1}')\nCURRENT_PRERELEASE=$(echo \"$CURRENT_VERSION\"|awk -F'-' '{print $2}')\n\n# if [[ $CURRENT_VERSION != *\"+\"* ]]; then\n#     CURRENT_PATCH=$(echo \"$CURRENT_VERSION\"|awk -F'.' '{print $3}'|awk -F'-' '{print $1}')\n#     CURRENT_PRERELEASE=$(echo \"$CURRENT_VERSION\"|awk -F'-' '{print $2}')\n# else\n#     CURRENT_PATCH=$(echo \"$CURRENT_VERSION\"|awk -F'.' '{print $3}'|awk -F'+' '{print $1}')\n#     CURRENT_PRERELEASE=$(echo \"$CURRENT_VERSION\"|awk -F'+' '{print $2}')\n# fi \n\n\n#---------------------------#\n# Version & Release Package #\n#---------------------------#\n\n# create release note before versioning the project\nsh ./scripts/create_release_script.sh \"$NEW_VERSION\"\n\n# explicitly add the change log to the version bump commit\ngit add CHANGELOG.md\necho \"Bumping version...\"\n\n# bump version, git tag, commit & then push changes\n# using -f to ignore the added release note\nnpm version -f \"$SEMVER\" -m \"Updating $SEMVER version to %s. [skip ci]\" --loglevel=error\necho \"Version bump successful\"\n\n# push to gitlab\n# no-verify is used to ignore any pre-push commits that may be used by the project\nif git push -f --tags origin ${BITBUCKET_BRANCH} --follow-tags --no-verify; then\n    echo \"Version bump pushed successfully.\"\nelse\n    echo -e \"\\033[0;31mERROR: ***********************************************************************************\"\n    echo \"ERROR: Failed to push.\"\n    echo -e \"ERROR: ***********************************************************************************\\033[0m\"\n    exit 1\nfi\n"
        },
        "outgoing": {
          "object": null
        },
        "error": "",
        "decorators": []
      },
      "deprecated": false,
      "groups": [],
      "actor": "Pronghorn",
      "x": 1.6856735566642909,
      "y": 0.20943952802359883,
      "scheduled": false
    },
    "7c35": {
      "name": "arrayPush",
      "canvasName": "push",
      "summary": "Add commit.sh",
      "description": "Adds one element to the end of an array and returns the (newly modified) array.",
      "location": "Application",
      "locationType": null,
      "app": "WorkFlowEngine",
      "type": "automatic",
      "displayName": "Array",
      "variables": {
        "incoming": {
          "arr": "$var.1649.pushedArray",
          "elementN": "$var.866.object"
        },
        "outgoing": {
          "pushedArray": null
        },
        "error": "",
        "decorators": []
      },
      "deprecated": false,
      "groups": [],
      "actor": "Pronghorn",
      "x": 0.5894511760513186,
      "y": 0.39233038348082594,
      "scheduled": false
    },
    "3d5d": {
      "name": "arrayPush",
      "canvasName": "push",
      "summary": "Add create_release_script.sh",
      "description": "Adds one element to the end of an array and returns the (newly modified) array.",
      "location": "Application",
      "locationType": null,
      "app": "WorkFlowEngine",
      "type": "automatic",
      "displayName": "Array",
      "variables": {
        "incoming": {
          "arr": "$var.7c35.pushedArray",
          "elementN": "$var.3853.object"
        },
        "outgoing": {
          "pushedArray": null
        },
        "error": "",
        "decorators": []
      },
      "deprecated": false,
      "groups": [],
      "actor": "Pronghorn",
      "x": 0.7904490377761939,
      "y": 0.39331366764995085,
      "scheduled": false
    },
    "4f62": {
      "name": "arrayPush",
      "canvasName": "push",
      "summary": "Add git_setup.sh",
      "description": "Adds one element to the end of an array and returns the (newly modified) array.",
      "location": "Application",
      "locationType": null,
      "app": "WorkFlowEngine",
      "type": "automatic",
      "displayName": "Array",
      "variables": {
        "incoming": {
          "arr": "$var.3d5d.pushedArray",
          "elementN": "$var.d42b.object"
        },
        "outgoing": {
          "pushedArray": null
        },
        "error": "",
        "decorators": []
      },
      "deprecated": false,
      "groups": [],
      "actor": "Pronghorn",
      "x": 1.0972549019607842,
      "y": 0.3894230769230769,
      "scheduled": false
    },
    "40fd": {
      "name": "arrayPush",
      "canvasName": "push",
      "summary": "Add node_setup.sh",
      "description": "Adds one element to the end of an array and returns the (newly modified) array.",
      "location": "Application",
      "locationType": null,
      "app": "WorkFlowEngine",
      "type": "automatic",
      "displayName": "Array",
      "variables": {
        "incoming": {
          "arr": "$var.4f62.pushedArray",
          "elementN": "$var.8bdb.object"
        },
        "outgoing": {
          "pushedArray": null
        },
        "error": "",
        "decorators": []
      },
      "deprecated": false,
      "groups": [],
      "actor": "Pronghorn",
      "x": 1.3741176470588234,
      "y": 0.39663461538461536,
      "scheduled": false
    },
    "d3e6": {
      "name": "arrayPush",
      "canvasName": "push",
      "summary": "Add promote.py",
      "description": "Adds one element to the end of an array and returns the (newly modified) array.",
      "location": "Application",
      "locationType": null,
      "app": "WorkFlowEngine",
      "type": "automatic",
      "displayName": "Array",
      "variables": {
        "incoming": {
          "arr": "$var.40fd.pushedArray",
          "elementN": "$var.80ce.object"
        },
        "outgoing": {
          "pushedArray": null
        },
        "error": "",
        "decorators": []
      },
      "deprecated": false,
      "groups": [],
      "actor": "Pronghorn",
      "x": 1.563791874554526,
      "y": 0.39823008849557523,
      "scheduled": false
    },
    "62a1": {
      "name": "arrayPush",
      "canvasName": "push",
      "summary": "Add ver_bump.sh",
      "description": "Adds one element to the end of an array and returns the (newly modified) array.",
      "location": "Application",
      "locationType": null,
      "app": "WorkFlowEngine",
      "type": "automatic",
      "displayName": "Array",
      "variables": {
        "incoming": {
          "arr": "$var.d3e6.pushedArray",
          "elementN": "$var.ef03.object"
        },
        "outgoing": {
          "pushedArray": "$var.job.scriptFiles"
        },
        "error": "",
        "decorators": []
      },
      "deprecated": false,
      "groups": [],
      "actor": "Pronghorn",
      "x": 1.7156094084105489,
      "y": 0.40117994100294985,
      "scheduled": false
    },
    "9bcf": {
      "name": "setObjectKey",
      "canvasName": "setObjectKey",
      "summary": "manifestLinkTester.js file content",
      "description": "Set an object key",
      "location": "Application",
      "locationType": null,
      "app": "WorkFlowEngine",
      "type": "automatic",
      "displayName": "Object",
      "variables": {
        "incoming": {
          "obj": {
            "name": "manifestLinkTester.js"
          },
          "path": [
            "content"
          ],
          "value": "const path = require('path'),\n      fs = require('fs-extra');\n\nconst args = process.argv.filter((element, index) => {\n  return index >=2;\n});\nif (args.length <= 0) {\n  const usage = `\n  ==============================================================\n    Simplified manifest schema validator, using ajv,\n    that can be used for very quick schema validations.\n    This will validate a json file against the schema\n    found in manifest-schema.json\n\n    Usage: node manifestTester.js someManifestFile.json\n\n    NOTE: for a graphical JSON schema validator go to\n    https://www.jsonschemavalidator.net/\n\n  ==============================================================`;\n  console.log(usage);\n  process.exit(1);\n}\n\nasync function runLinkValidation() {\n  const filePath = path.normalize(args[0]);\n\n  console.log(`Retrieving ${filePath}`);\n  const manifest = await fs.readFile(filePath, 'utf8');\n  console.log('Converting to JSON object');\n  const data = JSON.parse(manifest);\n\n  console.log('Iterating through artifacts...');\n  let valid=true;\n  for (let i=0; i<data.artifacts.length; i++){\n    const current = data.artifacts[i].location;\n    if (current){\n      if (fs.existsSync(`./${current}`)){\n        console.log(`\\t✅  Validating ${current}`);\n      }\n      else{\n        console.log(`\\t❌  Validating ${current}`);\n        valid = false;\n      }\n    }\n  }\n  if (!valid) {\n    console.error('Validation Failed  👎');\n    process.exit(1);\n  }\n  else {\n    console.log('Validation passed  👍');\n  }\n}\ntry {\n  runLinkValidation();\n}\ncatch(error) {\n  console.error(`Error occurred running the validator ${error}`);\n}\n"
        },
        "outgoing": {
          "object": null
        },
        "error": "",
        "decorators": []
      },
      "deprecated": false,
      "groups": [],
      "actor": "Pronghorn",
      "x": 2.2879543834640055,
      "y": 0.18190757128810225,
      "scheduled": false
    },
    "84c3": {
      "name": "arrayPush",
      "canvasName": "push",
      "summary": "Add manifestLinkTester.js",
      "description": "Adds one element to the end of an array and returns the (newly modified) array.",
      "location": "Application",
      "locationType": null,
      "app": "WorkFlowEngine",
      "type": "automatic",
      "displayName": "Array",
      "variables": {
        "incoming": {
          "arr": "$var.5820.pushedArray",
          "elementN": "$var.9bcf.object"
        },
        "outgoing": {
          "pushedArray": null
        },
        "error": "",
        "decorators": []
      },
      "deprecated": false,
      "groups": [],
      "actor": "Pronghorn",
      "x": 2.392017106200998,
      "y": 0.3824975417895772,
      "scheduled": false
    },
    "103d": {
      "name": "arrayPush",
      "canvasName": "push",
      "summary": "Add manifestTester.js",
      "description": "Adds one element to the end of an array and returns the (newly modified) array.",
      "location": "Application",
      "locationType": null,
      "app": "WorkFlowEngine",
      "type": "automatic",
      "displayName": "Array",
      "variables": {
        "incoming": {
          "arr": "$var.84c3.pushedArray",
          "elementN": "$var.6323.object"
        },
        "outgoing": {
          "pushedArray": "$var.job.testFiles"
        },
        "error": "",
        "decorators": []
      },
      "deprecated": false,
      "groups": [],
      "actor": "Pronghorn",
      "x": 2.668567355666429,
      "y": 0.3893805309734513,
      "scheduled": false
    },
    "f42b": {
      "name": "parse",
      "canvasName": "parse",
      "summary": "Parses a string to create an object.",
      "description": "Parses a JSON string, constructing the JavaScript value or object described by the string.",
      "location": "Application",
      "locationType": null,
      "app": "WorkFlowEngine",
      "type": "automatic",
      "displayName": "String",
      "variables": {
        "incoming": {
          "text": "{\"$schema\":\"http://json-schema.org/draft-07/schema#\",\"$id\":\"iap-artifact-bundle\",\"type\":\"object\",\"title\":\"Artifact Bundle Schema\",\"default\":null,\"additionalProperties\":false,\"definitions\":{\"tagged\":{\"$id\":\"#/properties/properties/properties/tagged\",\"type\":\"array\",\"title\":\"The Tagged Item\",\"description\":\"These are the items that need to be tagged\",\"uniqueItems\":true,\"items\":{\"$id\":\"#/properties/properties/properties/tagged/items\",\"type\":\"string\",\"title\":\"The Tagged Items\",\"default\":\"\",\"examples\":[\"mop-example-1\",\"mop-analytic-example-1\",\"workflow-example-1\"],\"pattern\":\"^(.*)$\"}}},\"required\":[\"bundleName\",\"version\",\"createdEpoch\",\"artifacts\"],\"properties\":{\"bundleName\":{\"$id\":\"#/properties/bundleName\",\"type\":\"string\",\"title\":\"The Bundle Name\",\"description\":\"Unique identifier for this bundle of artifacts.\",\"default\":\"\",\"examples\":[\"ExampleBundle\"],\"pattern\":\"^(.*)$\"},\"version\":{\"$id\":\"#/properties/version\",\"type\":\"string\",\"title\":\"The Version\",\"description\":\"The version of this bundle\",\"default\":\"\",\"examples\":[\"1.2.3\"],\"pattern\":\"^(.*)$\"},\"fingerprint\":{\"$id\":\"#/properties/fingerprint\",\"type\":\"string\",\"title\":\"The Fingerprint\",\"description\":\"For use in future implementations of  installable modules where additional security measures need to be implemented. \",\"default\":\"\",\"examples\":[\"Some verifiable token\"],\"pattern\":\"^(.*)$\"},\"createdEpoch\":{\"$id\":\"#/properties/createdEpoch\",\"type\":\"string\",\"title\":\"The Created Time\",\"description\":\"The date, in milliseconds since the unix epoch, for when this bundle was created/updated. Usually this is value of Date.now() or calling getTime() on a js Date object\",\"default\":\"\",\"examples\":[\"1554836984020\",\"result from Date.now()\"],\"pattern\":\"^(.*)$\"},\"artifacts\":{\"$id\":\"#/properties/artifacts\",\"type\":\"array\",\"title\":\"The Artifacts \",\"description\":\"List of artifacts in this bundle. Note that each item must be unique and duplicates will fail validation\",\"default\":null,\"uniqueItems\":true,\"items\":{\"$id\":\"#/properties/artifacts/items\",\"type\":\"object\",\"title\":\"Artifact items\",\"default\":null,\"additionalProperties\":false,\"properties\":{\"id\":{\"$id\":\"#/properties/artifacts/items/properties/id\",\"type\":\"string\",\"title\":\"The Artifact Id\",\"description\":\"Unique Id identifying this artifact. \",\"default\":\"\",\"examples\":[\"workflow-example-1\",\"mop-template-1\"],\"pattern\":\"^(.*)$\"},\"name\":{\"$id\":\"#/properties/artifacts/items/properties/name\",\"type\":\"string\",\"title\":\"The Artifact Name\",\"description\":\"The Name identifying this artifact\",\"default\":\"\",\"examples\":[\"My Worflow1\"],\"pattern\":\"^(.*)$\"},\"type\":{\"$id\":\"#/properties/artifacts/items/properties/type\",\"type\":\"string\",\"enum\":[\"mop-analytic-template\",\"mop-template\",\"workflow\",\"json-forms\",\"tag\",\"template\",\"forms\",\"golden-config\",\"service-catalog\",\"ac-agenda-job\",\"adapter\",\"app\",\"transformation\"],\"title\":\"The Artifact Type \",\"description\":\"The type of artifact(s) this entry encompasses. Must be one of the supported types listed in the enum\",\"default\":\"\",\"examples\":[\"mop-analytic-template\",\"mop-template\",\"workflow\",\"tag\",\"forms\",\"golden-config\"],\"pattern\":\"^(.*)$\"},\"location\":{\"$id\":\"#/properties/artifacts/items/properties/location\",\"type\":\"string\",\"title\":\"The Artifact Location\",\"description\":\"Path, relative to the root of this bundle, to either a specific artifact file or a directory of artifacts of a specific type. Future implementations may allow for URLs to external assets\",\"default\":\"\",\"examples\":[\"/bundles/ExampleBundle/workflow/myWorkflow1.json\",\"/bundles/workflows/\"],\"pattern\":\"^(.*)$\"},\"description\":{\"$id\":\"#/properties/artifacts/items/properties/description\",\"type\":\"string\",\"title\":\"The Description \",\"description\":\"The description of what this artifact is \",\"default\":\"\",\"examples\":[\"This artifact does things and stuff\"],\"pattern\":\"^(.*)$\"},\"properties\":{\"$id\":\"#/properties/artifacts/items/properties/properties\",\"type\":\"object\",\"title\":\"The Properties Schema\",\"description\":\"Additional properties that may be needed for a type during it's installations\",\"properties\":{\"tagged\":{\"$ref\":\"#/definitions/tagged\"}}}},\"if\":{\"properties\":{\"type\":{\"enum\":[\"tag\"]}}},\"then\":{\"required\":[\"id\",\"name\",\"type\",\"properties\"]},\"else\":{\"required\":[\"id\",\"name\",\"type\",\"location\"]}}}}}"
        },
        "outgoing": {
          "textObject": null
        },
        "error": "",
        "decorators": []
      },
      "deprecated": false,
      "groups": [],
      "actor": "Pronghorn",
      "x": 1.9044903777619386,
      "y": 0.38741396263520156,
      "scheduled": false
    },
    "6f7b": {
      "name": "objectToString",
      "canvasName": "toString",
      "summary": "Converts a valid JSON value to a string.",
      "description": "Converts a valid JSON value to a JSON string, optionally replacing values if a replacer function is specified or optionally including only the specified properties if a replacer array is specified.",
      "location": "Application",
      "locationType": null,
      "app": "WorkFlowEngine",
      "type": "automatic",
      "displayName": "Object",
      "variables": {
        "incoming": {
          "value": "$var.f42b.textObject",
          "replacer": "",
          "space": 2
        },
        "outgoing": {
          "stringified": null
        },
        "error": "",
        "decorators": []
      },
      "deprecated": false,
      "groups": [],
      "actor": "Pronghorn",
      "x": 1.9080541696364932,
      "y": 0.19862340216322516,
      "scheduled": false
    },
    "bcde": {
      "name": "setObjectKey",
      "canvasName": "setObjectKey",
      "summary": "yml file content",
      "description": "Set an object key",
      "location": "Application",
      "locationType": null,
      "app": "WorkFlowEngine",
      "type": "automatic",
      "displayName": "Object",
      "variables": {
        "incoming": {
          "obj": {
            "name": "bitbucket-pipelines.yml"
          },
          "path": [
            "content"
          ],
          "value": "image: atlassian/default-image:3\nservices:\n  - docker:dind\nafter_script:\n  - rm -rf ~/.ssh\ndefinitions:\n  steps:\n    - step: &quality\n        name: quality\n        runs-on:\n          - self.hosted\n          - linux\n        image: timbru31/node-alpine-git:16\n        allow_failure: true\n        script:\n          - npm i\n          # check node version:\n          - 'echo \"node version: $(node --version)\"'\n          # check npm version\n          - 'echo \"npm version: $(npm --version)\"'\n          - npm audit --registry=https://registry.npmjs.org\n    - step: &test\n        name: test\n        runs-on:\n          - self.hosted\n          - linux\n        image: timbru31/node-alpine-git:16\n        allow_failure: false\n        script:\n          - npm i\n          # check node version:\n          - 'echo \"node version: $(node --version)\"'\n          # check npm version\n          - 'echo \"npm version: $(npm --version)\"'\n          - npm run validateSchema\n\n          - npm i\n          # check node version:\n          - 'echo \"node version: $(node --version)\"'\n          # check npm version\n          - 'echo \"npm version: $(npm --version)\"'\n          - npm run validateSchemaLinks\n    - step: &generate\n        name: generate\n        runs-on:\n          - self.hosted\n          - linux\n        image: timbru31/node-alpine-git:16\n        allow_failure: false\n        artifacts:\n          paths:\n          - artifact.json\n          expire_in: 5 mins \n        script:\n          - sh ./scripts/commit.sh\n\npipelines:\n  default:\n    - step: *quality\n    - step: *test\n    - step: *generate\n\n  branches:\n    master:\n      - step: *quality\n      - step: *test\n      - step:\n          name: 'bump'\n          runs-on:\n            - self.hosted\n            - linux\n          image: timbru31/node-alpine-git:16\n          script:\n            - sh ./scripts/git_setup.sh\n            - sh ./scripts/node_setup.sh\n            - sh ./scripts/ver_bump.sh\n      - step: *generate\n      - step:\n          name: 'promote'\n          runs-on:\n            - self.hosted\n            - linux\n          image: python\n          allow_failure: false\n          dependencies: \n            - generate_artifact_json\n          script:\n            - pip3 install requests\n            - |\n              if [[ $PROMOTE != \"False\" ]]; then\n                if ! python3 ./scripts/promote.py ./artifact.json; then\n                  echo -e \"\\033[0;31mERROR: ***********************************************************************************\"\n                  echo \"ERROR: There was an issue promoting artifact.json to IAP.\"\n                  echo -e \"ERROR: ***********************************************************************************\\033[0m\"\n                  exit 1\n                fi\n              else\n                echo \"PROMOTE set to False, skipping promoting to IAP.\"\n              fi\n\n# Only use spaces to indent your .yml configuration.\n# -----\n"
        },
        "outgoing": {
          "object": null
        },
        "error": "",
        "decorators": []
      },
      "deprecated": false,
      "groups": [],
      "actor": "Pronghorn",
      "x": 2.808627450980392,
      "y": 0.18629807692307693,
      "scheduled": false
    },
    "289e": {
      "name": "arrayPush",
      "canvasName": "push",
      "summary": "Add bitbucket yml",
      "description": "Adds one element to the end of an array and returns the (newly modified) array.",
      "location": "Application",
      "locationType": null,
      "app": "WorkFlowEngine",
      "type": "automatic",
      "displayName": "Array",
      "variables": {
        "incoming": {
          "arr": [],
          "elementN": "$var.bcde.object"
        },
        "outgoing": {
          "pushedArray": "$var.job.yml"
        },
        "error": "",
        "decorators": []
      },
      "deprecated": false,
      "groups": [],
      "actor": "Pronghorn",
      "x": 2.9223529411764706,
      "y": 0.38221153846153844,
      "scheduled": false
    }
  },
  "transitions": {
    "866": {
      "7c35": {
        "type": "standard",
        "state": "success"
      }
    },
    "1649": {
      "866": {
        "type": "standard",
        "state": "success"
      }
    },
    "3853": {
      "3d5d": {
        "type": "standard",
        "state": "success"
      }
    },
    "5820": {
      "9bcf": {
        "type": "standard",
        "state": "success"
      }
    },
    "6323": {
      "103d": {
        "type": "standard",
        "state": "success"
      }
    },
    "7019": {
      "5820": {
        "type": "standard",
        "state": "success"
      }
    },
    "workflow_start": {
      "e474": {
        "type": "standard",
        "state": "success"
      }
    },
    "workflow_end": {},
    "e474": {
      "1649": {
        "type": "standard",
        "state": "success"
      }
    },
    "d42b": {
      "4f62": {
        "type": "standard",
        "state": "success"
      }
    },
    "8bdb": {
      "40fd": {
        "type": "standard",
        "state": "success"
      }
    },
    "80ce": {
      "d3e6": {
        "type": "standard",
        "state": "success"
      }
    },
    "ef03": {
      "62a1": {
        "type": "standard",
        "state": "success"
      }
    },
    "4bac": {},
    "89f8": {},
    "ce98": {},
    "7c35": {
      "3853": {
        "type": "standard",
        "state": "success"
      }
    },
    "e93e": {},
    "3d5d": {
      "d42b": {
        "type": "standard",
        "state": "success"
      }
    },
    "4f62": {
      "8bdb": {
        "type": "standard",
        "state": "success"
      }
    },
    "40fd": {
      "80ce": {
        "type": "standard",
        "state": "success"
      }
    },
    "d3e6": {
      "ef03": {
        "type": "standard",
        "state": "success"
      }
    },
    "62a1": {
      "f42b": {
        "type": "standard",
        "state": "success"
      }
    },
    "3e6c": {},
    "1f0b": {},
    "ed6d": {},
    "9bcf": {
      "84c3": {
        "type": "standard",
        "state": "success"
      }
    },
    "c42a": {},
    "84c3": {
      "6323": {
        "type": "standard",
        "state": "success"
      }
    },
    "103d": {
      "bcde": {
        "type": "standard",
        "state": "success"
      }
    },
    "f42b": {
      "6f7b": {
        "type": "standard",
        "state": "success"
      }
    },
    "6f7b": {
      "7019": {
        "type": "standard",
        "state": "success"
      }
    },
    "bcde": {
      "289e": {
        "type": "standard",
        "state": "success"
      }
    },
    "289e": {
      "workflow_end": {
        "type": "standard",
        "state": "success"
      }
    }
  },
  "type": "automation",
  "tags": [],
  "groups": []
}